<?php
    protected $document;
    protected $level3;

    protected $areLinksInitialized;
    protected $areLinkedResourcesInitialized;
    protected $isDataInitialized;

    public function __construct(\Level3\Level3 $level3)
    {
        $this->level3 = $level3;
    }

    public function getDocument()
    {
        return $this->document;
    }

    static public function formatToDocument(Array $data)
    {
{# fields #}
{% if extension.isRepositoryNeeded(class) %}
        if (isset($data['id'])) {
            $string = (string) $data['id'];

            try {
                $data['id'] = $object = {{ extension.getTypeFromResponse('MongoId') }};
            } catch (\Exception $e) {
                throw new \Level3\Exceptions\BadRequest();
            }

            if (!$object || $string != {{ extension.getTypeToResponse('MongoId') }}) {
                throw new \Level3\Exceptions\BadRequest();
            }
        }
       
{% endif %}
{% for name, config in config_class.fields %}
{% if 'referenceField' not in config|keys %}
{% if extension.hasType(config.type) %}
        if (isset($data['{{ name }}'])) {
            $string = $data['{{ name }}'];
            try {
                $data['{{ name }}'] = $object = {{ extension.getTypeFromResponse(config.type) }};
            } catch (\Exception $e) {
                throw new \Level3\Exceptions\BadRequest();
            }

            if (!$object || $string != {{ extension.getTypeToResponse(config.type) }}) {
                throw new \Level3\Exceptions\BadRequest();
            }
        }

{% endif %}
{% endif %}
{% endfor %}

{# embeddedsOne #}
{% for name, config in config_class.embeddedsOne %}
        if (isset($data['{{ name }}'])) {
            if (!is_array($data['{{ name }}'])) {
                throw new \Level3\Exceptions\BadRequest();
            }

            $data['{{ name }}'] = \{{ extension.getResourceClassName(config.class) }}::formatToDocument($data['{{ name }}']);
        }

{% endfor %}
{# embeddedsMany #}
{% for name, config in config_class.embeddedsMany %}
        if (isset($data['{{ name }}'])) {
            if (!is_array($data['{{ name }}'])) {
                throw new \Level3\Exceptions\BadRequest();
            }

            $count = count($data['{{ name }}']);
            for ($i=0;$i < $count ;$i++) { 
                if (!is_array($data['{{ name }}'][$i])) {
                    throw new \Level3\Exceptions\BadRequest();
                }
                
                $data['{{ name }}'][$i] = \{{ extension.getResourceClassName(config.class) }}::formatToDocument($data['{{ name }}'][$i]);
            }
        }

{% endfor %}
{# referencesOne #}
{% for name, config in config_class.referencesOne %}
        if (isset($data['{{ name }}'])) {
            $string = (string) $data['{{ name }}'];
            unset($data['{{ name }}']);

            try {
                $data['{{ name }}_reference_field'] = $object = {{ extension.getTypeFromResponse('MongoId') }};
            } catch (\Exception $e) {
                throw new \Level3\Exceptions\BadRequest();
            }

            if (!$object || $string != {{ extension.getTypeToResponse('MongoId') }}) {
                throw new \Level3\Exceptions\BadRequest();
            }
        }

{% endfor %}
{# referencesMany #}
{% for name, config in config_class.referencesMany %}
        if (isset($data['{{ name }}'])) {
            if (!is_array($data['{{ name }}'])) {
                throw new \Level3\Exceptions\BadRequest();
            }

            $data['{{ name }}_reference_field'] = array();
            $count = count($data['{{ name }}']);
            for ($i=0;$i < $count ;$i++) { 
                $string = (string) $data['{{ name }}'][$i];

                try {
                    $data['{{ name }}_reference_field'][$i] = $object = {{ extension.getTypeFromResponse('MongoId') }};
                } catch (\Exception $e) {
                    throw new \Level3\Exceptions\BadRequest();
                }

                if (!$object || $string != {{ extension.getTypeToResponse('MongoId') }}) {
                    throw new \Level3\Exceptions\BadRequest();
                }
            }

            unset($data['{{ name }}']);
        }


{% endfor %}
        
        return $data;
    }

    public function fromDocument(\{{ class }} $document)
    {
        $this->document = $document;
    }

    public function initializeData()
    {
        if (!$this->document) {
            return;
        }

        $this->setDataFromDocument();
    }

    public function initializeLinkedResources()
    {
        if (!$this->document) {
            return;
        }

        $this->setLinkedResourcesFromDocument();
    }

    public function initializeLinks()
    {
        if (!$this->document) {
            return;
        }

        $this->setLinksFromDocument();
    }

    public function fromDocuments(\Level3\Repository $repository, Array $documents)
    {
{% if extension.isRepositoryNeeded(class) %}
        $resourceIds = [];
        $resources = [];
        $lastUpdate = null;
{% endif %}
        foreach ($documents as $document) {
            $resources[] = $resource = $repository->createDocumentResource($document);  
{% if extension.isRepositoryNeeded(class) %}
            if (!$lastUpdate || $lastUpdate <= $resource->getLastUpdate()) {
                $lastUpdate = $resource->getLastUpdate();
            }

            if ($id = $resource->getId()) {
                $resourceIds[] = $id;
            }
{% endif %}
        }

        $this->addResources('resources', $resources);

{% if extension.isRepositoryNeeded(class) %}
{% if config_class.cache %}
        $this->setCache({{ config_class.cache.ttl }});

{% endif %}
        if (count($resourceIds) == count($documents)) {
            $this->setId(implode('|', $resourceIds));
        }

        if ($lastUpdate) {
            $this->setLastUpdate($lastUpdate);
        }
{% endif %}
    }

    protected function setDataFromDocument()
    {
        $this->isDataInitialized = true;

        $data = [];

{# fields #}
{% if extension.isRepositoryNeeded(class) or 'id' in config_class.fields|keys %}
        $object = $this->document->getId();
        $data['id'] = {{ extension.getTypeToResponse('MongoId') }};
{% endif %}
{% for name, config in config_class.fields %}
{% if 'referenceField' not in config|keys %}
{% if extension.hasType(config.type) %}
        $data['{{ name }}'] = $object = $this->document->get{{name|ucfirst}}();
        if ($object) {
            $data['{{ name }}'] = {{ extension.getTypeToResponse(config.type) }};
        }

{% else %}
{% if name != 'id' %}
        $data['{{ name }}'] = $this->document->get{{name|ucfirst}}();
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
{# referencesOne #}
{% for name, config in config_class.referencesOne %}
{% if 'polymorphic' in config|keys %}
        $referenced = $this->document->get{{ config.field|ucfirst }}();
        $data['{{ name }}'] = $referenced['id'];
{% else %}
        $data['{{ name }}'] = $this->document->get{{ config.field|ucfirst }}();
{% endif %}
        if ($data['{{ name }}']) {
            $data['{{ name }}'] = (string) $data['{{ name }}'];
        }

{% endfor %}

{# referencesMany #}
{% for name, config in config_class.referencesMany %}
        $data['{{ name }}'] = [];
        foreach ((array) $this->document->get{{ config.field|ucfirst }}() as $referenced) {
{% if 'polymorphic' in config|keys %}
            $data['{{ name }}'] = (string) $referenced['id'];
{% else %}
            $data['{{ name }}'][] = (string) $referenced;
{% endif %}
        }

{% endfor %}
        
        $this->setData(array_merge($data, parent::getData()));

{# embeddedsOne #}
{% for name, config in config_class.embeddedsOne %}
        if (${{ name }} = $this->document->get{{ name|ucfirst }}()) {
            $resource = $this->create{{ name|ucfirst }}EmbeddedResource(${{ name }});
            $this->addResource('{{ name }}', $resource);
        }

{% endfor %}
{# embeddedsMany #}
{% for name, config in config_class.embeddedsMany %}
        $resources = [];
        foreach($this->document->get{{ name|ucfirst }}() as $embedded) {
            $resources[] = $this->create{{ name|ucfirst }}EmbeddedResource($embedded);
        }
        
        $this->addResources('{{ name }}', $resources);
        
{% endfor %}
    }

    protected function setLinkedResourcesFromDocument()
    {
        $this->areLinkedResourcesInitialized = true;

{# referencesOne #}
{% for name, config in config_class.referencesOne %}
        $referenced = $this->document->get{{ name|ucfirst }}();
        if ($referenced) {
{% if 'polymorphic' in config|keys %}
            $repository =  $this->level3->getHub()->getByClass($referenced->getRepository()->getDocumentClass());
{% else %}
            $repository =  $this->getRepository('{{ extension.getRepositoryKey(config.class) }}');
{% endif %}
            $resource = $repository->createDocumentResource($referenced);
            
            $this->linkResource('{{ name }}', $resource);
        }

{% endfor %}
{# referencesMany #}
{% for name, config in config_class.referencesMany %}
{% if 'polymorphic' in config|keys %}
        $repository =  $this->level3->getHub()->getByClass($referenced->getRepository()->getDocumentClass());
{% else %}
        $repository =  $this->getRepository('{{ extension.getRepositoryKey(config.class) }}');
{% endif %}
        $resources = [];
        foreach ($this->document->get{{ name|ucfirst }}() as $referenced) {
            $resources[] = $resource = $repository->createDocumentResource($referenced);
        }

        if ($resources) {
            $this->linkResources('{{ name }}', $resources);
        }
{% endfor %}
    }


    protected function setLinksFromDocument()
    {
        $this->areLinksInitialized = true;
    }

    protected function getRepository($repositoryKey)
    {
        return $this->level3->getHub()->get($repositoryKey);
    }

    public function fromRequest(Array $data)
    {
{% for name in config_class.fields|keys %}
{% if config_class.fields[name].type  == 'date' %}
        if (isset($data['{{ name }}'])) {
            $data['{{ name }}'] = $this->types->fromRequest('DateTime', $data['{{ name }}']);
        }
{% endif %}
{% endfor %}

{# referencesOne #}
{% for name in config_class.referencesOne|keys %}
        if (isset($data['{{ name }}'])) {
            $data['{{ name }}_reference_field'] = $this->types->fromRequest('MongoId', $data['{{ name }}']);
            unset($data['{{ name }}']);
        }
{% endfor %}

        return $data;
    }

{% set embeddeds = config_class.embeddedsOne|merge(config_class.embeddedsMany) %}
{% for name, config in embeddeds %}
    protected function create{{ name|ucfirst }}EmbeddedResource(\{{ config.class }} $document)
    {
{% if extension.isRepositoryNeeded(config.class) %}
        $repository = $this->level3->getHub()->get('{{ extension.getRepositoryKey(class, name)}}');
        $resource = $repository->createDocumentResource($document);
{% else %}
        $resource = new \{{ extension.getResourceClassName(config.class) }}($this->level3);
        $resource->fromDocument($document);
{% endif %}

        return $resource;
    }

{% endfor %}

    public function setId($baseId)
    {
        $id = md5($baseId);

        return parent::setId($id);
    }

    public function getId()
    {
        $id = parent::getId();
        if (!$this->document || $id || !$this->getLastUpdate()) {
            return $id;
        }

        return ($this->document->getId() . $this->getLastUpdate()->getTimestamp());
    }

    public function getTitle()
    {
        if (method_exists($this->document, '__toString')) {
            return (string) $this->document;
        }

        return null;
    }

    public function getAllLinkedResources()
    {
        if (!$this->areLinkedResourcesInitialized) {
            $this->initializeLinkedResources();
        }

        return parent::getAllLinkedResources();
    }

    public function getLinkedResources($rel)
    {
        if (!$this->areLinkedResourcesInitialized) {
            $this->initializeLinkedResources();
        }

        return parent::getLinkedResources($rel);
    }

    public function getAllLinks()
    {
        if (!$this->areLinksInitialized) {
            $this->initializeLinks();
        }

        if (!$this->areLinkedResourcesInitialized) {
            $this->initializeLinkedResources();
        }

        return parent::getAllLinks();
    }

    public function getLinks($rel)
    {
        if (!$this->areLinksInitialized) {
            $this->initializeLinks();
        }

        if (!$this->areLinkedResourcesInitialized) {
            $this->initializeLinkedResources();
        }

        return parent::getLinks($rel);
    }

    public function getData()
    {
        if (!$this->isDataInitialized) {
            $this->initializeData();
        }

        return parent::getData();
    }

{% if extension.isRepositoryNeeded(class) %}
{% for config in config_class.behaviors %}
{% if config.class == 'Mongator\\Behavior\\Timestampable' %}
{% if 'updatedEnabled' not in config.options|keys %}
    public function getLastUpdate()
    {
        $lastUpdate = parent::getLastUpdate();
        if (!$this->document || $lastUpdate) {
            return $lastUpdate;
        }

{% if 'updatedField' in config.options|keys %}
        if ($updated = $this->document->get{{ config.options.updatedField|ucfirst }}()) {
            return $updated;
        }
{% endif %}  

        return $this->document->get{{ config.options.createdField|ucfirst }}();
    }
{% endif %}  
{% endif %}  
{% endfor %}

{% if config_class.cache %}
    public function getCache()
    {
        return {{ config_class.cache.ttl }};
    }
{% endif %}
{% endif %}

    public function toArray()
    {
        if (!$this->isDataInitialized) {
            $this->initializeData();
        }

        if (!$this->areLinkedResourcesInitialized) {
            $this->initializeLinkedResources();
        }

        if (!$this->areLinksInitialized) {
            $this->initializeLinks();
        }

        return parent::toArray();
    }
